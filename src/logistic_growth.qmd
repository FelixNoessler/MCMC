---
title: "Logistic growth model - Overview"
engine: julia
bibliography: lit.bib
format:
    html:
        toc: true
        number-sections: true
---


# Introduction

We assume that we observe a population of organisms that grow according to the logistic growth model. We observe the population size at discrete time points. 

This can be modelled with a state space model (synonyms are partially-observed Markov processes, hidden Markov model and nonlinear stochastic dynamical systems).

```{dot}
//| fig-width: 6
digraph HMM {
    node [shape=circle, style=filled, width=0.8];
    
    S1 [label="s(t-1)", fillcolor=white];
    S2 [label="s(t)", fillcolor=white];
    S3 [label="s(t+1)", fillcolor=white];
    Send [label="s(T)", fillcolor=white];

    Xstart [style=invis];
    X0[label="x(0)", fillcolor=lightblue]
    X1 [label="x(t-1)", fillcolor=lightblue];
    X2 [label="x(t)", fillcolor=lightblue];
    X3 [label="x(t+1)", fillcolor=lightblue];
    Xend [label="x(T)", fillcolor=lightblue];

    Y1 [label="y(t-1)", fillcolor=salmon];
    Y2 [label="y(t)", fillcolor=salmon];
    Y3 [label="y(t+1)", fillcolor=salmon];
    Yend [label="y(T)", fillcolor=salmon];

    S1 -> X1 [label = "εₜ₋₁"];
    S2 -> X2;
    S3 -> X3;
    Send -> Xend;

    Xstart -> X0 [label="p(x₀)"];
    X0 -> S1 [label="                                       ", style=dashed];  
    X1 -> S2 [label = "p(xₜ | xₜ₋₁)"];
    X2 -> S3;
    X3 -> Send [label="                                       ", style=dashed];

    X1 -> Y1  [label = "ηₜ₋₁"];
    X2 -> Y2 [label="p(yₜ | xₜ)" ];
    X3 -> Y3; 
    Xend -> Yend;

    { rank=same; S1; S2; S3; Send; }
    { rank=same; Xstart; X0; X1; X2; X3; Xend; }
    { rank=same; Y1; Y2; Y3; Yend; }
}
```


- $s(t)$: state that is modelled with a process-based model at time $t$
- $x(t)$: true hidden state at time $t$
- $y(t)$: observation at time $t$

- $p(x(t) | x(t-1))$: transition probability between the true states
- $p(y(t) | x(t))$: observation probability
- $p(x₀)$: prior for the initial state of the true states
- $εₜ₋₁$: process error
- $ηₜ₋₁$: observation error

# Process model

$$
\begin{align}
    &x_{t} = \left(1 + r\left(1 - \frac{x_{t-1}}{K}\right) + \varepsilon_{t}\right) \cdot x_{t-1} \\
    &\varepsilon_{t} \sim \mathcal{N}(0, \sigma_{p}^2)
\end{align}
$$

thereby we assume that the process error $\varepsilon$ scales with the population size.

# Observation model

We use a gamma distribution for the observation model:
$$
\begin{align}
    &\alpha_t = \frac{x_{t}^2}{\sigma_o^2} \\
    &\theta_t = \frac{\sigma_o^2}{x_{t}} \\
    &y_t \sim \text{Gamma}(\alpha_t, \theta_t)
\end{align}
$$

similarly we could also use a normal distribution for the observation model:
$$
    y_t \sim \mathcal{N}(x_{t}, \sigma_o^2)
$$


# Parameters

We will use the folling parameters for the simulation experiment:

| Parameter  | Description                                 | Value |
| ---------- | ------------------------------------------- | ----- |
| $\sigma_p$ | standard deviation of the process error     | 0.05  |
| $\sigma_o$ | standard deviation of the observation error | 20.0  |
| $r$        | growth rate                                 | 0.1   |
| $K$        | carrying capacity                           | 400   |
| $x_0$      | initial population size                     | 20    |

# Generate data

```{julia}
#| code-fold: true
import Random
using CairoMakie
using Distributions

set_theme!(
    fontsize = 18,
    Axis = (; xgridvisible = false, ygridvisible = false,
            topspinevisible = false, rightspinevisible = false),
    Legend = (; framevisible = false))

function generate_data(n_observations; σ_p, σ_o, r, K, x₀)
    ts = 1:n_observations
    T = length(ts)

    s = Array{Float64}(undef, T)
    x = Array{Float64}(undef, T)
    y = Array{Float64}(undef, T)
    ε = rand(Normal(0, σ_p), T)

    for t in ts
        x_lastt = t == 1 ? x₀ : x[t-1]
        s_lastt = t == 1 ? x₀ : s[t-1]

        s[t] = (1 + r*(1 - s_lastt/K)) * s_lastt
        x[t] = (1 + r*(1 - x_lastt/K) + ε[t]) * x_lastt
        y[t] = rand(Gamma(x[t]^2 / σ_o^2, σ_o^2 / x[t]))
    end

    (; ts, s, x, y, parameter = (; σ_o, r, K, x₀))
end

Random.seed!(123)
true_solution = generate_data(100; σ_p = 0.05, σ_o = 20.0, r = 0.1, K = 400, x₀ = 20.0);

let
    fig = Figure(size = (900, 600))

    ax = Axis(fig[1, 1]; xlabel = "time", ylabel = "population size")
    scatter!(true_solution.ts, true_solution.y, color = :steelblue4, label = "observations: y")
    lines!(true_solution.ts, true_solution.x, color = :blue, label = "true hidden state: x")
    lines!(true_solution.ts, true_solution.s, color = :red, label = "process-model state: s")
    Legend(fig[1, 2], ax)
    fig
end
```

# Parameter inference



| Experiment             | Description                                                                                         |
| ---------------------- | --------------------------------------------------------------------------------------------------- |
| MCMC without states v1 | we will just ignore the process error                                                               |
| MCMC without states v2 | we included the process error but we won't model the hidden state                                   |
| MCMC without states v3 | we included the process error and use one step ahead prediction but we won't model the hidden state |
| state space - MCMC     | we include the hidden state (the process error over time) as parameters in addition to the model parameters                             |
| state space - pMCMC    | we will infer the hidden state with a sequential monte carlo method (= particle filter) and use MCMC for the model parameters          |




- An introduction to pMCMC: [sbfnk.github.io/mfiidd/slides/smc.pdf](https://sbfnk.github.io/mfiidd/slides/smc.pdf) 
- Another intro to pMCMC: [kingaa.github.io/sbied/pfilter/slides.pdf](https://kingaa.github.io/sbied/pfilter/slides.pdf)


for an introduction to state space models in ecology see @state_space